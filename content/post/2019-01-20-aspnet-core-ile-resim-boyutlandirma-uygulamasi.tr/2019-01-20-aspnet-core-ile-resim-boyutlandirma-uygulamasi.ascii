= ASP.Net Core İle Resim Boyutlandırma Uygulaması
2019-01-20T20:23:00+03:00
:toc:

== Giriş

Bu yazımda https://github.com/SixLabors/ImageSharp[ImageSharp] ile basit
bir resim boyutlandırma uygulamasını nasıl yazıp geliştirdiğimden
bahsedeceğim. Uygulamamızın ön yüzü olmayacak, API olarak çalışacak.
Docker ile paketleyeğiz. Ve bence en önemlisi uygulamamızın
özelliklerini HTTP istekleriyle test etmeye yarayan nodejs
https://github.com/visionmedia/supertest[supertest] ile test edeceğiz.

'''''

== Tasarım Prensipleri

* Restful standartlara uygun bir API tasarlayacağız.
* Stateless tasarlamayı düşünüyordum, henüz tamamlayamadım. Şu anda
dosyalar konteyner üzerine upload ediliyor ve bu *kesinlikle ve
kesinlikle* canlı ortamda kullanılmaması gereken bir yöntem. Docker
containerları üzerinde kalıcı veri tutmayınız. Host makine üzerinde bir
klasöre, konteyner içindeki bir klasörü bağlamak çözümlerden biri.
Dosyaları AWS S3'e yüklemek ise planladığım çözüm.
* Dosyaların sadece orijinal hallerini depolayacağız. Resimlerin
boyutlandırılmış hallerini istek anında işleyip (`on-the-fly`)
sunacağız, depolamayacağız.
* Olabildiğince basit ve kullanılabilir halde temel özelliklerden oluşan
bir uygulama geliştireceğiz.
* Uygulamayı Docker ile derleyip ayağa kaldıracağız.
* Sadece temel fonksiyonları "yeteri" kadar test edeceğiz.

'''''

== Uygulamanın Özellikleri

* Tekli ve çoklu resim yükleme
* Mevcut resmi değiştirme
* Resim silme
* Sabit genişlik ve sabit yükseklikte resimleri boyutlandırma.

Bu kadar.

Bu adrese dosyamızı gönderiyoruz.

[source,http]
----
POST /api/upload
----

Buradan alıyoruz. Yükseklik _0_ olduğunda resmin orijinali döndürülür.

[source,http]
----
GET /image/h{height}/{name}
----

'''''

== Nasıl Test Edeceğiz

Test kodları ise
https://github.com/guneysus/dotnetcore-imageserver/tree/master/tests[burada].
Yazılmışı var.

Kısa bir örnek verelim:

Aşağıdaki kod, test için gerekli tanımlamaları yaptıktan sonra
`'_data/ZY-IMG_0091-635px.jpg'` dosyasını yükler ve dönen sonucun 200
olmasını ve sonucun içinde _jpg_ geçmesini bekler.

[source,js]
----
var should = require("chai").should(),
  expect = require("chai").expect,
  supertest = require("supertest"),
  API_URL = "http://app:5000",
  api = supertest(API_URL);

describe("JPEG File Upload", function() {
  it("single JPEG file upload", function(done) {
    api
      .post("/api/upload")
      .set("Content-Type", "multipart/form-data")
      .attach("image", "_data/ZY-IMG_0091-635px.jpg")
      .expect(200)
      .expect("Content-Type", /text\/plain/)
      .expect(/jpg/)
      .end(function(err, res) {
        if (err) {
          return done(err);
        }
        uploadedfile = res.text;

        done();
      });
  });
});
----

== Bu testleri de Dockerize edelim:

[source,dockerfile]
----
FROM node:8
WORKDIR /usr/src/app
COPY package*.json ./

RUN npm install
COPY . .

CMD [ "node_modules/.bin/mocha", "--timeout", "25000", "--colors", "--reporter", "mocha-jenkins-reporter"]
----

'''''

== Peki Nasıl Çalıştıracağız?

Proje içinde bir
https://github.com/guneysus/dotnetcore-imageserver/blob/master/Makefile[Makefile]
var. İçinde ihtiyacınız olan komutlar hatta gereksiz derece fazlalık
komutlar bile mevcut. `make up` demeniz yeterli. Veya docker-compose ile
projeyi kolayca ayağa kaldırabilirsiniz.

Biri test, diğer uygulama olmak üzere iki konteyner ayağa kalkacak ve
testler çalışacak. Şu an sekiz testten birinin başarısız olması
gerekiyor.

[source,shell]
----
docker-compose up --renew-anon-volumes --build
----

'''''

== Kodlar

https://github.com/guneysus/dotnetcore-imageserver/tree/master/src/ImageServer[Kodlar
Burada]
