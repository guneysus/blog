= HTTP Streaming ve Scalability
2020-03-22T13:50:03+03:00
:toc:

== Giriş

Günümüzde AVM ve restoranlarda nasıl ki müşteriler yemeğinin bir an önce
gelmesini istiyor ve bu çoğu zaman restoran tercihinde önemli rol
oynayabiliyorsa, günümüz web dünyasında da durum bundan farklı değil. Bu
sebeple sunucu kaynaklarımızı dengeli ve efektik kullanmanın önemi geçen
gün artmakta.

Sunucu maliyetlerimizi düşük tutmaya çalışırken bir yandan son
kullanıcıya daha hızlı ve kaliteli hizmet vermek öncelikli
hedeflerimizden olmalı.

____
Perfomance is a feature. -- Anonim
____

HTTP Streaming yöntemi, dolaylı yoldan sunucu maliyetini azaltırken, son
kullanıcıya daha hızlı hizmet vermeyi sağlar.

== Ölçeklenebilirlik

____
Scalability footnote:[https://en.wikipedia.org/wiki/Scalability] is the
property of a system to handle a growing amount of work by adding
resources to the system. In an economic context, a scalable business
model implies that a company can increase sales given increased
resources. -- _Wikipedia_
____

Türkçe olarak:

____
Bir sistemin artan yükün altından kaynak ekleyerek kalkma becerisidir.
Ekonomik bağlamda ise yatırım karşılığında gelirin artabilmesidir.
____

İdeal şartlarda bir birim kaynak artırımı ile ek bir birim daha iş
yapılması beklenir. footnote:[Bu 1/1 oranının ideal şartlarda bile 1'den
düşük olduğu _"[Carno
Teoremi](https://en.wikipedia.org/wiki/Carnot's_theorem_(thermodynamics))"_
ve _"Termal Verimlilik"_ prensipleri ile tanımlanmıştır.
https://en.wikipedia.org/wiki/Thermal_efficiency]

== HTTP Streaming

Giriş bölümünde _"Eşdeğer bir kaynakla daha fazla kullanıcıya hizmet
vermek"_ ifadesini kullandık.

_Stream_ footnote:[https://www.wordnik.com/words/stream] kelimesinden
yola çıkalım:

____
A steady current in such a flow of water.
____

Türkçe'ye ifade edecek olursak:

____
_Sabit bir su akışı_ footnote:[https://en.wikipedia.org/wiki/Streaming]
____

== Su Metaforu

Köyün yakınındaki bir su pınarı var ve köye su lazım. İki yolumuz var

. Tankerle su getirmek ve köy halkının bidonlarını tankerin ana hortumu
ile doldurmalarını sağlamak,
. Tankerin ana hortumuna çok sayıda hortum bağlayarak aynı anda
olabildiğince fazla sayıda kişiye su sağlamak.

Burada

* Tankerimiz, sunucularımızın Disk/Network
footnote:[https://en.wikipedia.org/wiki/Input/output] veya RAM
kapasitesini
* Bidon ve varillerin boyutu ise kullanıcıların web uygulamasından talep
ettiği dosya (_response_) boyutunu,
* Köy halkının sıraya girdikten sonra tankerden su alana kadarki süresi
ise web sunucusunun kullanıcının isteğini tamamlama süresini

temsil edebilir. Bu yazımızda kaynak olarak odak noktamız RAM olacak.

=== Tanker Senaryosu

Tanker senaryosunda, köy sakinleri su ihtiyaçları için pınara bir tanker
gönderir ve bütün köy halkı tankerin gelmesini bekler.

Tanker geldikten sonra sıraya girerler, tankerin hortumu yardımıyla
kovalarını doldurduktan sonra evlerine dönerler.

Köy sakinleri suya ulaşmak için:

* Tankerin gidip dönmesini,
* Tanker geldikten sonra sıranın kendileri gelmesini,
* Büyük hacimli bidon ve varillerle gelen kişilerin su doldurmalarını

beklediler. Çünkü tankerin bir adet tahliye hortumu var ve *aynı anda
sadece bir kişiye* hizmet verebiliyor.

Peki sıranın en önündeki kişi *bir tanker* suyu almak isterse ne olacak?

* İkinci sıradaki kişi dahil bir tanker suyun boşalmasını bekleyecek,
* Tanker, su doldurmak için tekrar pınara gidecek.

=== Öneri

\{\{% notice tip %}} Mümkünse sıradaki kişi sayısı kadar küçük hortumu
tankerimizin ana hortumuna bağlayarak sıradaki bütün kişilerin bekleme
sürelerini dengeleyerek bütün köy halkını memnun edebiliriz. \{\{%
/notice %}}

Böylece büyük varillerle gelen kişilere de aynı kapasitede debi
sağlanmış ve kaynak dengesizliğinin önüne önemli ölçüde geçilmiş oldu.

Buradaki önemli noktalar:

. Tankerin kapasitesi
. Ana hortuma bağlayabileceğimiz küçük hortum adeti.
. Yeni hortumlar ekleyerek daha fazla kişiye hizmet verebilmek kısacak:
*Ölçeklenebilirlik* footnote:[https://en.wikipedia.org/wiki/Scalability]

== No Streaming ve Streaming Karşılaştırması

Metaforumuzu yeterince açıkladıktan sonra bunu web uygulamamıza
uyarlayalım.

*1024 MB RAM* kapasiteli bir sunucumuz ve kullanıcılarımız bizden
*512MB* boyutlu farklı dosyalar istemiş olsun.

=== No Streaming

* Bir ve ikinci kullanıcının dosyalarını disk veya networkten okuyarak
RAM'e yazmayı *bekledik*
* Üçüncü kullanıcımız ise ilk iki kullanıcının isteklerinin
tamamlanmasını *bekleyecek* çünkü yeni bir *512MB* dosyayı yazmak için
RAM kalmadı.
* *512MB* boyutlu dosyalarım RAM'den boşaltılması *zaman alacak* çünkü
ne kullanıcılarımızın internet kapasitesi ne de network kapasitemiz bu
dosyaları bir anda kullanıcıya ulaştırmak için yeterli değil.
* Üçüncü kullanıcımız *hâlâ sırada bekliyor*.

=== Streaming

Streaming senaryosunda ise bir yandan disk veya networkten okurken,
diğer yandan bu okuduğumuz veriyi kullacılarımıza transfer ederiz.

* *1MB* parçalar halinde dosyalarımızı okuduğumuzu
* Diskimizin saniyede *32MB* dosya okuma kapasitesi olduğunu
* *Network* kapasitemizin aynı anda *32* kişiye *1MB* dosya
ulaştırabildiğini ve kullanıcılarımızın internet kapasitelerinin
saniyede en az *1MB* indidrebildiğini farz edelim.
* Sunucumuz 32 kişiyi sıraya aldı ve kullanıcılara ait dosyaları diskten
okuyarak kullanıcılara ulaştırmaya başladı.
* Her 512 saniyede 32 kişinin isteklerini sonlandırarak yeni
kullanıcılara hizmet vermeye başlayabilecek.

== Sonuç

Bu yazımızda "Streaming" yöntemini üzerinden anlatmaya çalıştım. Sonraki
yazılarımızda uygulamalı olarak bu konulara değinmeye çalışacağım.

* ASP.Net Core ile JSON ve File Streaming
* SQL Server üzerinden Streaming ile veri çekmek
* HTTP Client ile streaming download
* Son kullanıcıya yansıması
* Performans etkileri

konularından bahsedeceğiz.

== Dipnotlar
